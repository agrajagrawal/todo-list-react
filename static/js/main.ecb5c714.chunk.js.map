{"version":3,"sources":["components/Todoitem.jsx","components/App.jsx","reportWebVitals.js","index.js"],"names":["Todoitem","props","onDoubleClick","onPressed","id","item","App","useState","inputText","setInputText","items","setItems","deleteItem","prev","filter","index","className","onChange","event","newValue","target","value","type","onClick","prevItems","alert","map","todoItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6KAaeA,MAZf,SAAkBC,GAChB,OACE,oBACEC,cAAe,WACbD,EAAME,UAAUF,EAAMG,KAF1B,SAKGH,EAAMI,QC+CEC,MApDf,WACE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAgBA,SAASC,EAAWR,GAClBO,GAAS,SAACE,GACR,OAAOA,EAAKC,QAAO,SAACT,EAAMU,GACxB,OAAOA,IAAUX,QAIvB,OACE,sBAAKY,UAAU,YAAf,UACE,qBAAKA,UAAU,UAAf,SACE,8CAEF,sBAAKA,UAAU,OAAf,UACE,uBAAOC,SA3Bb,SAAsBC,GACpB,IAAMC,EAAWD,EAAME,OAAOC,MAC9BZ,EAAaU,IAyBsBG,KAAK,OAAOD,MAAOb,IAClD,wBAAQe,QAvBd,WACiB,KAAZf,GAGHG,GAAS,SAACa,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAsBhB,OAExBC,EAAa,KALXgB,MAAM,wBAqBJ,SACE,4CAGJ,8BACE,6BACGf,EAAMgB,KAAI,SAACC,EAAUZ,GAAX,OACT,cAAC,EAAD,CAEEX,GAAIW,EACJV,KAAMsB,EACNxB,UAAWS,GAHNG,cC/BJa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ecb5c714.chunk.js","sourcesContent":["import React from \"react\";\r\nfunction Todoitem(props) {\r\n  return (\r\n    <li\r\n      onDoubleClick={() => {\r\n        props.onPressed(props.id);\r\n      }}\r\n    >\r\n      {props.item}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Todoitem;\r\n","import React, { useState } from \"react\";\nimport Todoitem from \"./Todoitem\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  function handleChange(event) {\n    const newValue = event.target.value;\n    setInputText(newValue);\n  }\n\n  function addItem() {\n    if(inputText===\"\") {\n      alert(\"Enter a Task to Add\");\n      return;}\n    setItems((prevItems) => {\n      return [...prevItems, inputText];\n    });\n    setInputText(\"\");\n  }\n  function deleteItem(id) {\n    setItems((prev) => {\n      return prev.filter((item, index) => {\n        return index !== id;\n      });\n    });\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <div className=\"form\">\n        <input onChange={handleChange} type=\"text\" value={inputText} />\n        <button onClick={addItem}>\n          <span>Add</span>\n        </button>\n      </div>\n      <div>\n        <ul>\n          {items.map((todoItem, index) => (\n            <Todoitem\n              key={index}\n              id={index}\n              item={todoItem}\n              onPressed={deleteItem}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}